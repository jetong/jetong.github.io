<App>
    import styles.css at top level and all children components have access through className.

    Note that "import Featured from './components/featured';" implicitly imports index.js
    Also note the organizational structure this creates: index.js is simply a stateless component that wraps the other components in the featured folder: <Carousel> and <TimeUntil>.

    Temporarily set height in order to test scroll events
    <div className="App" style={{ height:"1500px", background:'cornflowerblue'}}>
</App>

<Header>
    Makes extensive use of Material-UI.  AppBar components, Drawer component, List components, etc.
    These components have a number of different prop options.  See doc: https://material-ui.com/api/app-bar/

    Demonstrates use of Google fonts
    Obtain link and paste into index.html
    styles.css now has access to those fonts
    reference that style within <Header> by using className reference.

    <IconButton> is the menu button.
    <SideDrawer> is the actual menu that renders on click.
    Note that because both of these are child components of <Header>, state is tracked in <Header>.
    <IconButton> simply sets drawerOpen state to true and <SideDrawer> sets it to false onClose.

    Scroll event listener set up in componentDidMount()
    Sets headerShow state to true when window.scrollY > 0, otherwise false making it transparent.
    Note the <AppBar> style property that was set up to handle some of this logic:
    backgroundColor: this.state.headerShow ? '#2f2f2f' : 'transparent'
</Header>


<Carousel>
    Makes use of react-slick to enable Carousel functionality.

    Note at each div level we style with height:`${window.innerHeight}px`
    This ensures the carousel and its contained image spans the full height of the window on load.

    Note use of ES6 spread operator to populate Slider props.
    We use divs with style background:`url(${slide_one})` to include images.

    Carousel stylesheets were linked within index.html
    See https://github.com/akiran/react-slick
</Carousel>


<TimeUntil>
    This is the counter displaying how much time is left until the concert date.
    Makes use of react-reveal for sliding effect.

    We keep state on the time so that it re-renders when it changes each second.

    Note use of ES6 within setState()

    We run getTimeUntil() once every second after we're sure the component has mounted:
    componentDidMount() {
            setInterval(()=> this.getTimeUntil(this.state.deadline), 1000);
    }

    <Slide left delay={1000}>
    Slide has many options.  Here we slide in from left after 1 sec.
</TimeUntil>


<VenueNfo>
    Uses react-reveal/Zoom with duration and delay.
</VenueNfo>


<Hightlights>
    <Description> contains simple description that fades in
    <Discount> contains the discount percentage with fade effect and discount description with slide effect.
    The onReveal() property of <Fade> waits for the percent fade-in animation to complete, and then triggers function percentage() that updates the percentage state by 1, re-rendering the component.
    Meanwhile, we detect the component's re-rendering and call percentage() to increment again.  These functions pass control back and forth until we hit 30%.

    componentDidUpdate() {
        setTimeout(()=> {
            this.percentage();
        }, 25)
    }

    We also went over how to create a reusable button.
    Simply have the button component take in a props parameter that would populate the button template.
</Hightlights>


<Pricing>
Demonstration of using a function to map through an array of state data, and returning the populated JSX to return().

Note the shorter syntax using parentheses in showBoxes().
These are equivalent:

showBoxes = () => (
    <div>
        Hello
    </div>
)

showBoxes = () => {
    return (
        <div>
            Hello
        </div>
    )
}

Also note that lists require keys and it's not recommended to use array indexes as keys even though this demo project does.
More info: https://reactjs.org/docs/lists-and-keys.html
</Pricing>


<Location>
    Embed iframe generated by google map.  Make sure to rename certain props in the iframe (like frameborder to frameBorder) so that they are JSX compliant.
</Location>


<Footer>
    Straight-forward footer with delayed fade in.
</Footer>